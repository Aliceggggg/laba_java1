public class Metods {
     //метод выделения дробной части - №1
    public double franction(double x) {
        double result = x - Math.floor(x);
        result = Math.round(result * 100000.0) / 100000.0; 
        return result; 
    }

    // Из символа в число -№2
    public int charToNum (char x) {
        int x_int = x - '0';
        if (x_int == 0) 
            return 48;
        else 
            return x_int;
    }

    // Проверка на двузначность числа -№3
    public boolean is2Digits (int x) {
        int cout = 1;
        while (x >= 10) {
            x = x/10;
            cout ++;
        }
        return cout == 2;
    }

    // Проверка на вхождение в промежуток -№4
    public boolean isInRange (int a, int b, int num) {
        int min = Math.min(a,b);
        int max = Math.max(a,b);
        return num >= min && num <= max;
    }

    // Проверка на равенство трёх чисел -№5
    public boolean isEqual(int a, int b, int c) {
        return (a == b) && (b == c);
    }

    // Метод модуля числа -№6
    public int abs (int x) {
        if (x > 0)
            return x;
        else 
            return -x;
    }

    // Деление на 3 или 5 -№7
    public boolean is35(int x) {
        return (x % 5 == 0 && x % 3 != 0) || (x % 5 != 0 && x % 3 == 0);
    }

    // Нахождение максимума из трех №8
    public int max3(int x, int y, int z) {
        int max;
        if (x > y)
            max = x;
        else 
            max = y;
        if (max < z) 
            max = z;
        return max;
    }

    // Сумма двух с условиями №9
    public int sum2(int x, int y) {
        if (x + y >= 10 && x + y <= 19) 
            return 20;
        else 
            return x + y;
    }

    // День недели №10
    public String day(int x) {
        switch (x) {
            case 1 -> {
                return "Понедельник";
            }
            case 2 -> {
                return "Вторник";
            }
            case 3 -> {
                return "Среда";
            }
            case 4 -> {
                return "Четверг";
            }
            case 5 -> {
                return "Пятница";
            }
            case 6 -> {
                return "Суббота";
            }
            case 7 -> {
                return "Воскресенье";
            }
            default -> {
                return "это не день недели";
            }
        }
    }

    // Строка из ряда чисел от 0 до x №11
    public String listNums(int x) {
        String list = "";
        for (int i = 0; i <= x; i++) {
            list = list + " ";
            list = list + Integer.toString(i);
        }
        return list;
    }

     // Строка из ряда четных чисел от 0 до x №12
    public String chet(int x) {
        String list = "";
        for (int i = 0; i <= x; i+= 2) {
            list = list + " ";
            list = list + Integer.toString(i);
        }
        return list;
    }

    // Метод подсчета цифр в числе №13
    public int numLen(long x) {
        int count = 1;
        while (x >= 10) {
            x = x / 10;
            count ++;
        }
        return count;
    }

    // Квадрат из "*" №14
    public void square(int x) {
        for (int i = 0; i < x; i++) {
            for (int j = 0; j < x; j++) {
                System.out.print ('*');
            }
            System.out.print("\n");
        }
    }

    // Треугольник из "*" №15
    public void rightTriangle(int x) {
        for (int i = 0; i < x; i++) {
            for (int j = 0; j < x; j++) {
                if (j >= x-i-1)
                    System.out.print ('*');
                else 
                    System.out.print (' ');
            }
            System.out.print("\n");
        }
    }

    // Индекс элемента в массиве №16
    public int findFirst(int[] arr, int x) {
        for (int i = 0; i < arr.length; i++) {
            if (x == arr[i]) 
                return i;
        }
        return -1;
    }

    // Максимальное число без учета знака №17
    public int maxAbs(int[] arr) {
        int max = 0;
        for (int i = 0; i < arr.length; i++) {
            if (abs(arr[i]) > abs(max)) {
                max = arr[i];
            }
        }
        return max;
    }

    // Новый массив из объеднения двух старых №18
    public int[] add(int[] arr, int[] ins, int pos) {
        int[] result = new int[ins.length + arr.length];

        for (int i = 0; i < pos; i++) {
            result[i] = arr[i];
        }
    
        for (int i = 0; i < ins.length; i++) {
            result[pos + i] = ins[i];
        }
   
        for (int i = pos; i < arr.length; i++) {
            result[ins.length + i] = arr[i];
        }
    
        return result;
    }

    // Инверсия массива №19
    public int[] reverseBack (int[] arr) {
        int[] res = new int[arr.length];
        for (int i = 0; i < arr.length; i++) {
            res[i] = arr[arr.length-i-1];
        }
        return res;
    }

    // Создание массива индексов числа x №20
    public int[] findAll(int[] arr, int x) {
        int count = 0;
        for (int i = 0; i < arr.length; i++) {
            if (x == arr[i]) 
                count ++;
        }

        if (count == 0) {
            return new int[0];
        }

        int[] res = new int[count];
        count = 0;

        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == x) {
                res[count] = i;
                count ++;
            }
        }
        return res;
    }

}
